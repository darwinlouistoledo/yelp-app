ext {

  dataDependencies = [
      [configuration: "implementation", dependency: fileTree(dir: 'libs', include: ['*.jar'])],
      [configuration: "implementation", dependency: project(':domain')],
      [configuration: "implementation", dependency: project(':common_android')],

      [configuration: "implementation", dependency: "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"],

      [configuration: "implementation", dependency: "androidx.appcompat:appcompat:$androidx_version_appcompat"],
      [configuration: "implementation", dependency: "androidx.core:core-ktx:$androidx_version_core"],
      [configuration: "implementation", dependency: "com.google.android.material:material:$material_version"],

      // android test
      [configuration: "testImplementation", dependency: "junit:junit:$junit_version"],
      [configuration: "androidTestImplementation", dependency: "androidx.test:runner:$test_runner"],
      [configuration: "androidTestImplementation", dependency: "androidx.test:rules:$test_rule"],
      [configuration: "androidTestImplementation", dependency: "androidx.test.espresso:espresso-core:$espresso_version"],

      // Timber Logging
      [configuration: "implementation", dependency: "com.jakewharton.timber:timber:$timber_version"],

      // Retrofit2
      [configuration: "implementation", dependency: "com.squareup.retrofit2:retrofit:$retrofit2_version"],
      [configuration: "implementation", dependency: "com.squareup.retrofit2:converter-gson:$retrofit2_version"],
      [configuration: "implementation", dependency: "com.squareup.retrofit2:adapter-rxjava2:$retrofit2_version"],

      // okhttp3
      [configuration: "implementation", dependency: "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"],
      [configuration: "implementation", dependency: "com.squareup.okhttp3:okhttp:$okhttp3_version"],
      [configuration: "androidTestImplementation", dependency: "com.squareup.okhttp3:mockwebserver:$okhttp3_version"],

      // rxjava
      [configuration: "implementation", dependency: "io.reactivex.rxjava2:rxandroid:$rxandroid_version"],
      [configuration: "implementation", dependency: "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"],
      [configuration: "implementation", dependency: "io.reactivex.rxjava2:rxjava:$rxjava_version"],

      // Dagger 2
      [configuration: "implementation", dependency: "com.google.dagger:dagger:$dagger_version"],
      [configuration: "implementation", dependency: "com.google.dagger:dagger-android:$dagger_version"],
      [configuration: "implementation", dependency: "com.google.dagger:dagger-android-support:$dagger_version"],
      [configuration: "kapt", dependency: "com.google.dagger:dagger-android-processor:$dagger_version"],
      [configuration: "kapt", dependency: "com.google.dagger:dagger-compiler:$dagger_version"],
      [configuration: "kaptAndroidTest", dependency: "com.google.dagger:dagger-compiler:$dagger_version"],
      [configuration: "compileOnly", dependency: "com.squareup.inject:assisted-inject-annotations-dagger2:$assist_inject_version"],
      [configuration: "kapt", dependency: "com.squareup.inject:assisted-inject-processor-dagger2:$assist_inject_version"],

      //RealmDB
      /*[configuration: "api", dependency: "io.realm:realm-annotations:$realm_version"],
      [configuration: "api", dependency: "io.realm:realm-android-library:$realm_version"],
      [configuration: "api", dependency: "io.realm:realm-android-kotlin-extensions:$realm_version"],
      [configuration: "kapt", dependency: "io.realm:realm-annotations-processor:$realm_version"]*/
  ]
}